version: 2.1
orbs:
  aws-eks: circleci/aws-eks@0.2.0
  kubernetes: circleci/kubernetes@0.3.0
jobs:
  test_build:
    docker:
      - image: circleci/python:3.6.3
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |  # use pipenv to install dependencies
            python3 -m venv venv
            sudo pip install pipenv
            . venv/bin/activate
            pipenv install --dev
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest -v flask_app/

  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.3

    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |  # use pipenv to install dependencies
            python3 -m venv venv
            sudo pip install pipenv
            . venv/bin/activate
            pipenv install --dev

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Build and push Docker image
          command: |
            . venv/bin/activate
            docker build -t $DOCKER_LOGIN/$IMAGE_NAME:$TAG .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/$IMAGE_NAME:$TAG
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: kubernetes/demoapp-deployment.yml
          resource-name: deployment/demoapp-deployment

  create-service:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: kubernetes/demoapp-service.yml
          resource-name: service/demoapp-service
workflows:
  version: 2.1
  test_build_deploy:
    jobs:
#      - test_build:
#          filters:
#            branches:
#              only:
#                - master
#      - build:
#          requires:
#            - test_build
#          filters:
#            branches:
#              only:
#                - master

#      - aws-eks/create-cluster:
#          cluster-name: my-eks-demo
#      - test-cluster:
#          cluster-name: my-eks-demo
#          requires:
#            - aws-eks/create-cluster
#          filters:
#            branches:
#              only:
#                - eksdeploy
#
#      - aws-eks/delete-cluster:
#          cluster-name: my-eks-demo
#          requires:
#            - test-cluster

      - create-deployment:
          cluster-name: my-eks-demo
      - create-service:
          requires:
            - create-deployment
#      - aws-eks/update-container-image:
#          cluster-name: my-eks-demo
#          container-image-updates: 'demoapp=hemrantech/flask-circleci-eks-demo:latest'
#          post-steps:
#            - kubernetes/delete-resource:
#                resource-names: nginx-deployment
#                resource-types: deployment
#                wait: true
#          record: true
#          requires:
#            - create-deployment
#          resource-name: deployment/demoapp-deployment